/*
 * Copyright (c) 2021, NVIDIA CORPORATION.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#pragma once

#include <cudf/column/column.hpp>
#include <cudf/lists/lists_column_view.hpp>

namespace cudf {
namespace lists {
/**
 * @addtogroup lists_concatenate
 * @{
 * @file
 */

/*
 * @brief Flag to specify whether a null element will be ignored from concatenation, or the
 * entire concatenation result involving null elements will be a null element.
 */
enum class concatenate_null_policy { IGNORE, NULLIFY_OUTPUT_ROW };

/**
 * @brief Row-wise concatenating multiple columns into a single lists column.
 *
 * The output column is generated by concatenating the elements within each row of the input
 * table. If any row of the input table contains null elements, the concatenation process will
 * either ignore those null elements, or will simply set the entire resulting row to be a null
 * element. During concatenation, a non-list element will be considered as a list containing a
 * single entry.
 *
 * Currently, the `concatenate_rows` API only support non-nested list.
 *
 * @throw cudf::logic_error if the types of entries from different columns of the input table do not
 * match.
 * @throw cudf::logic_error if the input table contains nested lists.
 *
 * @param lists_columns  Table of lists to be concatenated.
 * @param null_policy    The parameter to specify whether a null element will be ignored from
 * concatenation, or any concatenation involving a null element will result in a null list
 * element.
 * @param mr             Device memory resource used to allocate the returned column's device
 * memory.
 * @return               A new column in which each row is a list from the result of concatenating
 * all the elements in the corresponding row of the input table.
 */
std::unique_ptr<column> concatenate_rows(
  table_view const& lists_columns,
  concatenate_null_policy null_policy = concatenate_null_policy::IGNORE,
  rmm::mr::device_memory_resource* mr = rmm::mr::get_current_device_resource());

/** @} */  // end of group
}  // namespace lists
}  // namespace cudf
