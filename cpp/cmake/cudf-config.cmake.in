@PACKAGE_INIT@


#[=======================================================================[

Provide targets for the cudf library.

Built based on the Apache Arrow columnar memory format, cuDF is a GPU DataFrame
library for loading, joining, aggregating, filtering, and otherwise
manipulating data.

cuDF provides a pandas-like API that will be familiar to data engineers &
data scientists, so they can use it to easily accelerate their workflows
without going into the details of CUDA programming.


Imported Targets
^^^^^^^^^^^^^^^^

If cudf is found, this module defines the following IMPORTED GLOBAL
targets:

 cudf::cudf             - The main cudf library.

This module offers an optional testing component which defines the
following IMPORTED GLOBAL  targets:

 cudf::cudftestutil     - The main cudf testing library
 cudf::gmock
 cudf::gmock_main
 cudf::gtest
 cudf::gtest_main


Result Variables
^^^^^^^^^^^^^^^^

This module will set the following variables in your project::

  cudf_FOUND
  CUDF_VERSION
  CUDF_VERSION_MAJOR
  CUDF_VERSION_MINOR

#]=======================================================================]


cmake_minimum_required(VERSION 3.18)

set(_possible_targets_to_promote
      cudf::cudf
      cudf::benchmark
      cudf::benchmark_main
      cudf::gmock
      cudf::gtest
      cudf::gmock_main
      cudf::gtest_main
      cudf::cudftestutil
      rmm::rmm
      arrow_shared
      arrow_cuda_shared )
foreach(t IN LISTS _possible_targets_to_promote)
  if(NOT TARGET ${t})
    list(APPEND _targets_to_promote ${t})
  endif()
endforeach()

set(CUDF_VERSION @CUDF_VERSION@)
set(CUDF_VERSION_MAJOR @CUDF_VERSION_MAJOR@)
set(CUDF_VERSION_MINOR @CUDF_VERSION_MINOR@)

# make the bundled find modules in this directory available
list(PREPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}")

include(CMakeFindDependencyMacro)

find_dependency(CUDAToolkit)
find_dependency(Threads)
find_dependency(ZLIB)

# Don't look for a Boost CMake configuration file because it adds the
# `-DBOOST_ALL_NO_LIB` and `-DBOOST_FILESYSTEM_DYN_LINK` compile defs
set(Boost_NO_BOOST_CMAKE ON)
find_dependency(Boost @CUDF_MIN_VERSION_Boost@ COMPONENTS filesystem)

find_dependency(Arrow @CUDF_VERSION_Arrow@)

set(ArrowCUDA_DIR "${Arrow_DIR}")
find_dependency(ArrowCUDA @CUDF_VERSION_Arrow@)

find_dependency(rmm @CUDF_MIN_VERSION_rmm@)

set(Thrust_ROOT "${CMAKE_CURRENT_LIST_DIR}/../../../include/libcudf/Thrust")
find_dependency(Thrust @CUDF_MIN_VERSION_Thrust@)
thrust_create_target(cudf::Thrust FROM_OPTIONS)

list(POP_FRONT CMAKE_MODULE_PATH)

include("${CMAKE_CURRENT_LIST_DIR}/cudf-targets.cmake")

if(testing IN_LIST cudf_FIND_COMPONENTS)
  enable_language(CUDA)

  find_dependency(GTest @CUDF_MIN_VERSION_GTest@)
  include("${CMAKE_CURRENT_LIST_DIR}/cudf-testing-targets.cmake")
endif()

include("${CMAKE_CURRENT_LIST_DIR}/cudf-config-version.cmake")

check_required_components(cudf)

foreach(t IN LISTS _targets_to_promote)
  if(TARGET ${t})
    set_target_properties(${t} PROPERTIES IMPORTED_GLOBAL TRUE)
  endif()
endforeach()
set(${CMAKE_FIND_PACKAGE_NAME}_CONFIG "${CMAKE_CURRENT_LIST_FILE}")

include(FindPackageHandleStandardArgs)
find_package_handle_standard_args(${CMAKE_FIND_PACKAGE_NAME} CONFIG_MODE)
