diff --git a/src/nanoarrow/common/inline_buffer.h b/src/nanoarrow/common/inline_buffer.h
index caa6be4..70ec8a2 100644
--- a/src/nanoarrow/common/inline_buffer.h
+++ b/src/nanoarrow/common/inline_buffer.h
@@ -347,7 +347,7 @@ static inline void _ArrowBitsUnpackInt32(const uint8_t word, int32_t* out) {
 }
 
 static inline void _ArrowBitmapPackInt8(const int8_t* values, uint8_t* out) {
-  *out = (uint8_t)(values[0] | ((values[1] + 0x1) & 0x2) | ((values[2] + 0x3) & 0x4) |
+  *out = (uint8_t)(values[0] | ((values[1] + 0x1) & 0x2) | ((values[2] + 0x3) & 0x4) | // NOLINT
                    ((values[3] + 0x7) & 0x8) | ((values[4] + 0xf) & 0x10) |
                    ((values[5] + 0x1f) & 0x20) | ((values[6] + 0x3f) & 0x40) |
                    ((values[7] + 0x7f) & 0x80));
@@ -471,13 +471,13 @@ static inline void ArrowBitsSetTo(uint8_t* bits, int64_t start_offset, int64_t l
     // set bits within a single byte
     const uint8_t only_byte_mask =
         i_end % 8 == 0 ? first_byte_mask : (uint8_t)(first_byte_mask | last_byte_mask);
-    bits[bytes_begin] &= only_byte_mask;
+    bits[bytes_begin] &= only_byte_mask;  // NOLINT
     bits[bytes_begin] |= (uint8_t)(fill_byte & ~only_byte_mask);
     return;
   }
 
   // set/clear trailing bits of first byte
-  bits[bytes_begin] &= first_byte_mask;
+  bits[bytes_begin] &= first_byte_mask;  // NOLINT
   bits[bytes_begin] |= (uint8_t)(fill_byte & ~first_byte_mask);
 
   if (bytes_end - bytes_begin > 2) {
@@ -637,7 +637,7 @@ static inline void ArrowBitmapAppendInt8Unsafe(struct ArrowBitmap* bitmap,
   n_remaining -= n_full_bytes * 8;
   if (n_remaining > 0) {
     // Zero out the last byte
-    *out_cursor = 0x00;
+    *out_cursor = 0x00;  // NOLINT
     for (int i = 0; i < n_remaining; i++) {
       ArrowBitSetTo(bitmap->buffer.data, out_i_cursor++, values_cursor[i]);
     }
