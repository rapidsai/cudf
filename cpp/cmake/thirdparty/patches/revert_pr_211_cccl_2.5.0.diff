diff --git a/thrust/thrust/system/cuda/detail/internal/copy_device_to_device.h b/thrust/thrust/system/cuda/detail/internal/copy_device_to_device.h
index 046eb83c0..8047c9701 100644
--- a/thrust/thrust/system/cuda/detail/internal/copy_device_to_device.h
+++ b/thrust/thrust/system/cuda/detail/internal/copy_device_to_device.h
@@ -53,41 +53,15 @@ namespace cuda_cub
 
 namespace __copy
 {
-template <class Derived, class InputIt, class OutputIt>
-OutputIt THRUST_RUNTIME_FUNCTION device_to_device(
-  execution_policy<Derived>& policy, InputIt first, InputIt last, OutputIt result, thrust::detail::true_type)
-{
-  typedef typename thrust::iterator_traits<InputIt>::value_type InputTy;
-  const auto n = thrust::distance(first, last);
-  if (n > 0)
-  {
-    cudaError status;
-    status = trivial_copy_device_to_device(
-      policy,
-      reinterpret_cast<InputTy*>(thrust::raw_pointer_cast(&*result)),
-      reinterpret_cast<InputTy const*>(thrust::raw_pointer_cast(&*first)),
-      n);
-    cuda_cub::throw_on_error(status, "__copy:: D->D: failed");
-  }
-
-  return result + n;
-}
 
 template <class Derived, class InputIt, class OutputIt>
 OutputIt THRUST_RUNTIME_FUNCTION device_to_device(
-  execution_policy<Derived>& policy, InputIt first, InputIt last, OutputIt result, thrust::detail::false_type)
+  execution_policy<Derived>& policy, InputIt first, InputIt last, OutputIt result)
 {
   typedef typename thrust::iterator_traits<InputIt>::value_type InputTy;
   return cuda_cub::transform(policy, first, last, result, thrust::identity<InputTy>());
 }
 
-template <class Derived, class InputIt, class OutputIt>
-OutputIt THRUST_RUNTIME_FUNCTION
-device_to_device(execution_policy<Derived>& policy, InputIt first, InputIt last, OutputIt result)
-{
-  return device_to_device(
-    policy, first, last, result, typename is_indirectly_trivially_relocatable_to<InputIt, OutputIt>::type());
-}
 } // namespace __copy
 
 } // namespace cuda_cub
