diff --git a/thrust/system/cuda/detail/sort.h b/thrust/system/cuda/detail/sort.h
index 1ffeef0..5e80800 100644
--- a/thrust/system/cuda/detail/sort.h
+++ b/thrust/system/cuda/detail/sort.h
@@ -108,7 +108,7 @@ namespace __merge_sort {
     key_type key2 = keys_shared[keys2_beg];
 
 
-#pragma unroll
+#pragma unroll 1
     for (int ITEM = 0; ITEM < ITEMS_PER_THREAD; ++ITEM)
     {
       bool p = (keys2_beg < keys2_end) &&
@@ -311,10 +311,10 @@ namespace __merge_sort {
       void stable_odd_even_sort(key_type (&keys)[ITEMS_PER_THREAD],
                                 item_type (&items)[ITEMS_PER_THREAD])
       {
-#pragma unroll
+#pragma unroll 1
         for (int i = 0; i < ITEMS_PER_THREAD; ++i)
         {
-#pragma unroll
+#pragma unroll 1
           for (int j = 1 & i; j < ITEMS_PER_THREAD - 1; j += 2)
           {
             if (compare_op(keys[j + 1], keys[j]))
@@ -350,7 +350,7 @@ namespace __merge_sort {
         // each thread has  sorted keys_loc
         // merge sort keys_loc in shared memory
         //
-#pragma unroll
+#pragma unroll 1
         for (int coop = 2; coop <= BLOCK_THREADS; coop *= 2)
         {
           sync_threadblock();
@@ -479,7 +479,7 @@ namespace __merge_sort {
           // and fill the remainig keys with it
           //
           key_type max_key = keys_loc[0];
-#pragma unroll
+#pragma unroll 1
           for (int ITEM = 1; ITEM < ITEMS_PER_THREAD; ++ITEM)
           {
             if (ITEMS_PER_THREAD * tid + ITEM < num_remaining)
diff a/cub/device/dispatch/dispatch_radix_sort.cuh b/cub/device/dispatch/dispatch_radix_sort.cuh
index 41eb1d2..f2893b4 100644
--- a/cub/device/dispatch/dispatch_radix_sort.cuh
+++ b/cub/device/dispatch/dispatch_radix_sort.cuh
@@ -723,7 +723,7 @@ struct DeviceRadixSortPolicy
 
 
     /// SM60 (GP100)
-    struct Policy600 : ChainedPolicy<600, Policy600, Policy500>
+    struct Policy600 : ChainedPolicy<600, Policy600, Policy600>
     {
         enum {
             PRIMARY_RADIX_BITS      = (sizeof(KeyT) > 1) ? 7 : 5,    // 6.9B 32b keys/s (Quadro P100)
diff a/cub/device/dispatch/dispatch_reduce.cuh b/cub/device/dispatch/dispatch_reduce.cuh
index f6aee45..dd64301 100644
--- a/cub/device/dispatch/dispatch_reduce.cuh
+++ b/cub/device/dispatch/dispatch_reduce.cuh
@@ -284,7 +284,7 @@ struct DeviceReducePolicy
     };
 
     /// SM60
-    struct Policy600 : ChainedPolicy<600, Policy600, Policy350>
+    struct Policy600 : ChainedPolicy<600, Policy600, Policy600>
     {
         // ReducePolicy (P100: 591 GB/s @ 64M 4B items; 583 GB/s @ 256M 1B items)
         typedef AgentReducePolicy<
diff a/cub/device/dispatch/dispatch_scan.cuh b/cub/device/dispatch/dispatch_scan.cuh
index c0c6d59..937ee31 100644
--- a/cub/device/dispatch/dispatch_scan.cuh
+++ b/cub/device/dispatch/dispatch_scan.cuh
@@ -178,7 +178,7 @@ struct DeviceScanPolicy
     };
 
     /// SM600
-    struct Policy600 : ChainedPolicy<600, Policy600, Policy520>
+    struct Policy600 : ChainedPolicy<600, Policy600, Policy600>
     {
         typedef AgentScanPolicy<
                 128, 15,                                        ///< Threads per block, items per thread
diff --git a/thrust/system/cuda/detail/scan_by_key.h b/thrust/system/cuda/detail/scan_by_key.h
index fe4b321c..b3974c69 100644
--- a/thrust/system/cuda/detail/scan_by_key.h
+++ b/thrust/system/cuda/detail/scan_by_key.h
@@ -513,7 +513,7 @@ namespace __scan_by_key {
             scan_op(scan_op_)
       {
         int  tile_idx      = blockIdx.x;
-        Size tile_base     = ITEMS_PER_TILE * tile_idx;
+        Size tile_base     = ITEMS_PER_TILE * static_cast<Size>(tile_idx);
         Size num_remaining = num_items - tile_base;
 
         if (num_remaining > ITEMS_PER_TILE)
@@ -734,7 +734,7 @@ namespace __scan_by_key {
                              ScanOp                     scan_op,
                              AddInitToScan              add_init_to_scan)
   {
-    int          num_items    = static_cast<int>(thrust::distance(keys_first, keys_last));
+    size_t       num_items    = static_cast<size_t>(thrust::distance(keys_first, keys_last));
     size_t       storage_size = 0;
     cudaStream_t stream       = cuda_cub::stream(policy);
     bool         debug_sync   = THRUST_DEBUG_SYNC_FLAG;
