@PACKAGE_INIT@

cmake_minimum_required(VERSION 3.18)

set(_possible_targets_to_promote
      cudf::cudf
      GTest::gmock
      GTest::gmock_main
      GTest::gtest
      GTest::gtest_main
      cudf::cudftestutil
      rmm::rmm
      arrow_shared
      arrow_cuda_shared )
foreach(target IN LISTS _possible_targets_to_promote)
  if(NOT TARGET ${target})
    list(APPEND _targets_to_promote ${target})
  endif()
endforeach()

set(CUDF_VERSION @CUDF_VERSION@)
set(CUDF_VERSION_MAJOR @CUDF_VERSION_MAJOR@)
set(CUDF_VERSION_MINOR @CUDF_VERSION_MINOR@)
set(CUDF_SOURCE_DIR "@CUDF_SOURCE_DIR@")

include(CMakeFindDependencyMacro)

# make the src tree find modules available
list(PREPEND CMAKE_MODULE_PATH "@CUDF_SOURCE_DIR@/cmake/install/")
set(rmm_DIR "@rmm_DIR@")

# * find CUDAToolkit package
# * determine GPU architectures
# * enable the CMake CUDA language
# * set other CUDA compilation flags
include(@CUDF_SOURCE_DIR@/cmake/Modules/ConfigureCUDA.cmake)

###################################################################################################
# - dependencies ----------------------------------------------------------------------------------

find_dependency(Threads)
find_dependency(ZLIB)

# add third party dependencies using CPM
include(@CUDF_SOURCE_DIR@/cmake/thirdparty/CUDF_GetCPM.cmake)
# find boost
include(@CUDF_SOURCE_DIR@/cmake/thirdparty/CUDF_FindBoost.cmake)
# find jitify
include(@CUDF_SOURCE_DIR@/cmake/thirdparty/CUDF_GetJitify.cmake)
# find thrust/cub
include(@CUDF_SOURCE_DIR@/cmake/thirdparty/CUDF_GetThrust.cmake)
# find rmm
set(CUDF_MIN_VERSION_rmm "${CUDF_VERSION_MAJOR}.${CUDF_VERSION_MINOR}")
include(@CUDF_SOURCE_DIR@/cmake/thirdparty/CUDF_GetRMM.cmake)

# find arrow
if(EXISTS "${CMAKE_CURRENT_LIST_DIR}/cudf-arrow-targets.cmake")
  include("${CMAKE_CURRENT_LIST_DIR}/cudf-arrow-targets.cmake")
else()
  if(NOT DEFINED CUDF_USE_ARROW_STATIC)
    set(CUDF_USE_ARROW_STATIC OFF)
  endif()
  include(@CUDF_SOURCE_DIR@/cmake/thirdparty/CUDF_GetArrow.cmake)
endif()

# find GTest
if(EXISTS "${CMAKE_CURRENT_LIST_DIR}/cudf-gtesting-targets.cmake")
  include("${CMAKE_CURRENT_LIST_DIR}/cudf-gtesting-targets.cmake")
else()
  # find gtest
  include(@CUDF_SOURCE_DIR@/cmake/thirdparty/CUDF_GetGTest.cmake)
endif()

list(POP_FRONT CMAKE_MODULE_PATH)


include("${CMAKE_CURRENT_LIST_DIR}/cudf-targets.cmake")
if(EXISTS "${CMAKE_CURRENT_LIST_DIR}/cudf-testing-targets.cmake")
  include("${CMAKE_CURRENT_LIST_DIR}/cudf-testing-targets.cmake")
endif()

include("${CMAKE_CURRENT_LIST_DIR}/cudf-config-version.cmake")

check_required_components(cudf)

foreach(target IN LISTS _targets_to_promote)
  if(TARGET ${target})
    fix_cmake_global_defaults(${target})
  endif()
endforeach()

set(${CMAKE_FIND_PACKAGE_NAME}_CONFIG "${CMAKE_CURRENT_LIST_FILE}")

include(FindPackageHandleStandardArgs)
find_package_handle_standard_args(${CMAKE_FIND_PACKAGE_NAME} CONFIG_MODE)
