# Dependency list for https://github.com/rapidsai/dependency-file-generator
files:
  all:
    output: conda
    matrix:
      cuda: ["11.5"]
      arch: [x86_64]
    includes:
      - build
      - cudatoolkit
      - develop
      - doc
      - notebooks
      - py_version
      - run
      - test_python
  test_cpp:
    output: none
    includes:
      - cudatoolkit
      - libidentify_stream_usage_build
  test_python:
    output: none
    includes:
      - cudatoolkit
      - py_version
      - test_python
  test_java:
    output: none
    includes:
      - cudatoolkit
      - test_java
  test_notebooks:
    output: none
    includes:
      - notebooks
      - py_version
  checks:
    output: none
    includes:
      - develop
      - py_version
channels:
  - rapidsai
  - rapidsai-nightly
  - dask/label/dev
  - pytorch
  - conda-forge
  - nvidia
dependencies:
  build:
    common:
      - output_types: [conda, requirements]
        packages:
          - &cmake_ver cmake>=3.23.1,!=3.25.0
          - cuda-python>=11.7.1,<12.0
          - cython>=0.29,<0.30
          - dlpack>=0.5,<0.6.0a0
          - ninja
          - &pyarrow_ver pyarrow=9.0.0
          - rmm=23.02.*
          - scikit-build>=0.13.1
      - output_types: conda
        packages:
          - arrow-cpp=9
          - c-compiler
          - cxx-compiler
          - librdkafka=1.7.0
          - protobuf>=3.20.1,<3.21.0a0
    specific:
      - output_types: conda
        matrices:
          - matrix:
              arch: x86_64
            packages:
              - &gcc_amd64 gcc_linux-64=9.*
              - &sysroot_amd64 sysroot_linux-64==2.17
          - matrix:
              arch: aarch64
            packages:
              - &gcc_aarch64 gcc_linux-aarch64=9.*
              - &sysroot_aarch64 sysroot_linux-aarch64==2.17
      - output_types: conda
        matrices:
          - matrix:
              arch: x86_64
              cuda: "11.5"
            packages:
              - &nvcc_amd64_115 nvcc_linux-64=11.5
          - matrix:
              arch: aarch64
              cuda: "11.5"
            packages:
              - &nvcc_aarch64_115 nvcc_linux-aarch64=11.5
  cudatoolkit:
    specific:
      - output_types: conda
        matrices:
          - matrix:
              cuda: "11.2"
            packages:
              - cudatoolkit=11.2
          - matrix:
              cuda: "11.4"
            packages:
              - cudatoolkit=11.4
          - matrix:
              cuda: "11.5"
            packages:
              - cudatoolkit=11.5
  develop:
    common:
      - output_types: [conda, requirements]
        packages:
          - pre-commit
      - output_types: conda
        packages:
          - doxygen=1.8.20 # pre-commit hook needs a specific version.
  doc:
    common:
      - output_types: [conda, requirements]
        packages:
          - myst-nb
          - nbsphinx
          - numpydoc
          - pandoc<=2.0.0 # We should check and fix all "<=" pinnings
          - pydata-sphinx-theme
          - sphinx
          - sphinx-autobuild
          - sphinx-copybutton
          - sphinx-markdown-tables
          - sphinxcontrib-websupport
  libidentify_stream_usage_build:
    common:
      - output_types: conda
        packages:
          - *cmake_ver
    specific:
      - output_types: conda
        matrices:
          - matrix:
              arch: x86_64
            packages:
              - *gcc_amd64
              - *sysroot_amd64
          - matrix:
              arch: aarch64
            packages:
              - *gcc_aarch64
              - *sysroot_aarch64
      - output_types: conda
        matrices:
          - matrix:
              arch: x86_64
              cuda: "11.2"
            packages:
              - nvcc_linux-64=11.2
          - matrix:
              arch: aarch64
              cuda: "11.2"
            packages:
              - nvcc_linux-aarch64=11.2
          - matrix:
              arch: x86_64
              cuda: "11.4"
            packages:
              - nvcc_linux-64=11.4
          - matrix:
              arch: aarch64
              cuda: "11.4"
            packages:
              - nvcc_linux-aarch64=11.4
          - matrix:
              arch: x86_64
              cuda: "11.5"
            packages:
              - *nvcc_amd64_115
          - matrix:
              arch: aarch64
              cuda: "11.5"
            packages:
              - *nvcc_aarch64_115
  notebooks:
    common:
      - output_types: [conda, requirements]
        packages:
          - ipython
          - notebook
          - scipy
  py_version:
    specific:
      - output_types: conda
        matrices:
          - matrix:
              py: "3.8"
            packages:
              - python=3.8
          - matrix:
              py: "3.9"
            packages:
              - python=3.9
          - matrix:
            packages:
              - python>=3.8,<3.10
  run:
    common:
      - output_types: [conda, requirements]
        packages:
          - cachetools
          - dask>=2022.12.0
          - distributed>=2022.12.0
          - fsspec>=0.6.0
          - numba>=0.56.2
          - numpy
          - nvtx>=0.2.1
          - packaging
          - pandas>=1.0,<1.6.0dev0
          - python-confluent-kafka=1.7.0
          - streamz
          - typing_extensions
      - output_types: conda
        packages:
          - cubinlinker
          - cupy>=9.5.0,<12.0.0a0
          - pip
          - pip:
              - git+https://github.com/python-streamz/streamz.git@master
          - ptxcompiler
          - rmm=23.02.*
      - output_types: requirements
        packages:
          # pip recognizes the index as a global option for the requirements.txt file
          # This index is needed for rmm, cubinlinker, ptxcompiler.
          - --extra-index-url=https://pypi.ngc.nvidia.com
          - cubinlinker-cu11
          - git+https://github.com/python-streamz/streamz.git@master
          - ptxcompiler-cu11
          - rmm-cu11=23.02.*
    specific:
      - output_types: requirements
        matrices:
          - matrix:
              arch: x86_64
            packages:
              - cupy-cuda115>=9.5.0,<12.0.0a0 # TODO: This might change to cupy-cuda11x?
          - matrix:
              arch: aarch64
            packages:
              - cupy-cuda11x -f https://pip.cupy.dev/aarch64 # TODO: Verify that this works.
  test_java:
    common:
      - output_types: conda
        packages:
          - *cmake_ver
          - maven
          - openjdk=8.*
    specific:
      - output_types: conda
        matrices:
          - matrix:
              cuda: "11.5"
            packages:
              - cuda-nvtx=11.5
  test_python:
    common:
      - output_types: [conda, requirements]
        packages:
          - aiobotocore>=2.2.0
          - boto3>=1.21.21
          - botocore>=1.24.21
          - dask-cuda=23.02.*
          - fastavro>=0.22.9
          - hypothesis
          - mimesis>=4.1.0
          - moto>=4.0.8
          # We need to pin arrow 9 in the test environment until we upgrade
          # cudf to use arrow 10. Without the pin, we end up with
          # unsatisfiabile constraints because changes in the arrow conda
          # packages in arrow 10 include the creation of new packages (namely
          # arrow-cpp was renamed to libarrow) that do not have equivalents in
          # arrow 9 and whose dependency constraints prevent the downgrade to
          # arrow 9 when (lib)cudf attempts to install.
          - *pyarrow_ver
          - pyorc
          - pytest
          - pytest-benchmark
          - pytest-cases
          - pytest-cov
          - pytest-xdist
          - python-snappy>=0.6.0
          - s3fs>=2022.3.0
          - scipy
          # TODO: This is a temporary orc pinning to ensure we get an older
          # pyarrow 9 build. There is something wrong with the latest pyarrow 9
          # build that causes conflicts on ARM. We should remove this pinning
          # after migrating to Arrow 10, and probably update protobuf as well.
          - orc=1.7.*
    specific:
      - output_types: conda
        matrices:
          - matrix:
              arch: x86_64
            packages:
              # Currently, CUDA builds of pytorch do not exist for aarch64. We require
              # version <1.12.0 because newer versions use nvidia::cuda-toolkit.
              - pytorch<1.12.0
              # We only install these on x86_64 to avoid pulling pytorch as a
              # dependency of transformers.
              - tokenizers==0.13.1
              - transformers==4.24.0
          - matrix:
            packages:
