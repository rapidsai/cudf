---
# Reference: https://clang.llvm.org/docs/ClangFormatStyleOptions.html
Language:        Cpp
# BasedOnStyle:  LLVM
# no indentation (-2 from indent, which is 2)
AccessModifierOffset: -2
AlignAfterOpenBracket: Align
# int aaaa = 12;
# int b    = 23;
# int ccc  = 23;
# leaving OFF
AlignConsecutiveAssignments: false
# int         aaaa = 12;
# float       b = 23;
# std::string ccc = 23;
# leaving OFF
AlignConsecutiveDeclarations: false
##define A                                                                      \
#  int aaaa;                                                                    \
#  int b;                                                                       \
#  int dddddddddd;
# leaving ON
AlignEscapedNewlines: Right
# int aaa = bbbbbbbbbbbbbbb +
#           ccccccccccccccc;
# leaving ON
AlignOperands:   true
# true:                                   false:
# int a;     // My comment a      vs.     int a; // My comment a
# int b = 2; // comment  b                int b = 2; // comment about b
# leaving ON
AlignTrailingComments: true
# squeezes a long declaration's arguments to the next line:
#true:
#void myFunction(
#	int a, int b, int c, int d, int e);
#
#false:
#void myFunction(int a,
#				int b,
#				int c,
#				int d,
#				int e);
# leaving ON
AllowAllParametersOfDeclarationOnNextLine: true
# changed to ON, as we use short blocks on same lines
AllowShortBlocksOnASingleLine: true
# set this to ON, we use this in a few places
AllowShortCaseLabelsOnASingleLine: true
# set this to ON
AllowShortFunctionsOnASingleLine: Inline
AllowShortIfStatementsOnASingleLine: false
AllowShortLoopsOnASingleLine: false
# Deprecated option.
# PenaltyReturnTypeOnItsOwnLine applies, as we set this to None,
# where it tries to break after the return type automatically
AlwaysBreakAfterDefinitionReturnType: None
AlwaysBreakAfterReturnType: None
AlwaysBreakBeforeMultilineStrings: false
AlwaysBreakTemplateDeclarations: MultiLine

# if all the arguments for a function don't fit in a single line,
# with a value of "false", it'll split each argument into different lines
BinPackArguments: true
BinPackParameters: true

# if this is set to Custom, the BraceWrapping flags apply
BreakBeforeBraces: Custom
BraceWrapping:
  AfterClass:      false
  AfterControlStatement: false
  AfterEnum:       false
  AfterFunction:   false
  AfterNamespace:  false
  AfterObjCDeclaration: false
  AfterStruct:     false
  AfterUnion:      false
  AfterExternBlock: false
  BeforeCatch:     false
  BeforeElse:      false
  IndentBraces:    false
  SplitEmptyFunction: false
  SplitEmptyRecord: false
  SplitEmptyNamespace: false

# will break after operators when a line is too long
BreakBeforeBinaryOperators: None
# not in docs.. so that's nice
BreakBeforeInheritanceComma: false
# This will break inheritance list and align on colon,
# it also places each inherited class in a different line.
# Leaving ON
BreakInheritanceList: BeforeColon

#
#true:
#veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongDescription
#	? firstValue
#	: SecondValueVeryVeryVeryVeryLong;
#
#false:
#veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongDescription ?
#	firstValue :
#	SecondValueVeryVeryVeryVeryLong;
BreakBeforeTernaryOperators: false

BreakConstructorInitializersBeforeComma: false
BreakConstructorInitializers: BeforeColon
BreakAfterJavaFieldAnnotations: true
BreakStringLiterals: true
# So the line lengths in cudf are not following a limit, at the moment.
# Usually it's a long comment that makes the line length inconsistent.
# Command I used to find max line lengths (from cpp directory):
#   find include src tests|grep "\." |xargs -I{} bash -c "awk '{print length}' {} | sort -rn | head -1"|sort -n
# I picked 100, as it seemed somewhere around median
ColumnLimit:     100
# TODO: not aware of any of these at this time
CommentPragmas:  '^ IWYU pragma:'
# So it doesn't put subsequent namespaces in the same line
CompactNamespaces: false
ConstructorInitializerAllOnOneLineOrOnePerLine: false
ConstructorInitializerIndentWidth: 4
ContinuationIndentWidth: 4
# TODO: adds spaces around the element list
# in initializer: vector<T> x{ {}, ..., {} }
Cpp11BracedListStyle: true
DerivePointerAlignment: false
DisableFormat:   false
ExperimentalAutoDetectBinPacking: false
# } // namespace a => useful
FixNamespaceComments: true
ForEachMacros:
  - foreach
  - Q_FOREACH
  - BOOST_FOREACH
IncludeBlocks:   Regroup
IncludeCategories:
  - Regex:           '<[[:alnum:]]+>'
    Priority:        0
  - Regex:           '<[[:alnum:].]+>'
    Priority:        1
  - Regex:           '<.*>'
    Priority:        2
  - Regex:           '.*/.*'
    Priority:        3
  - Regex:           '.*'
    Priority:        4
# if a header matches this in an include group, it will be moved up to the
# top of the group.
IncludeIsMainRegex: '(Test)?$'
IndentCaseLabels: true
IndentPPDirectives: None
IndentWidth:     2
IndentWrappedFunctionNames: false
JavaScriptQuotes: Leave
JavaScriptWrapImports: true
KeepEmptyLinesAtTheStartOfBlocks: true
MacroBlockBegin: ''
MacroBlockEnd:   ''
MaxEmptyLinesToKeep: 1
NamespaceIndentation: None
ObjCBinPackProtocolList: Auto
ObjCBlockIndentWidth: 2
ObjCSpaceAfterProperty: false
ObjCSpaceBeforeProtocolList: true

# Penalties: leaving unchanged for now
# https://stackoverflow.com/questions/26635370/in-clang-format-what-do-the-penalties-do
PenaltyBreakAssignment: 2
PenaltyBreakBeforeFirstCallParameter: 19
PenaltyBreakComment: 300
PenaltyBreakFirstLessLess: 120
PenaltyBreakString: 1000
PenaltyBreakTemplateDeclaration: 10
PenaltyExcessCharacter: 1000000
# As currently set, we don't see return types being
# left on their own line, leaving at 60
PenaltyReturnTypeOnItsOwnLine: 60

# char* foo vs char *foo, picking Right aligned
PointerAlignment: Right
ReflowComments:  true
# leaving ON, but this could be something to turn OFF
SortIncludes:    true
SortUsingDeclarations: true
SpaceAfterCStyleCast: false
SpaceAfterTemplateKeyword: true
SpaceBeforeAssignmentOperators: true
SpaceBeforeCpp11BracedList: false
SpaceBeforeCtorInitializerColon: true
SpaceBeforeInheritanceColon: true
SpaceBeforeParens: ControlStatements
SpaceBeforeRangeBasedForLoopColon: true
SpaceInEmptyParentheses: false
SpacesBeforeTrailingComments: 1
SpacesInAngles:  false
SpacesInContainerLiterals: true
SpacesInCStyleCastParentheses: false
SpacesInParentheses: false
SpacesInSquareBrackets: false
Standard:        Cpp11
TabWidth:        8
UseTab:          Never
...
