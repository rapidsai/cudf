# Copyright (c) 2022, NVIDIA CORPORATION.
import glob
import os
import re
import subprocess
import sys

from numba import cuda
from ptxcompiler.patch import CMD

from . import _version

__version__ = _version.get_versions()["version"]

ENABLED = False


def compiler_from_ptx_file(path):
    """Parse a PTX file header and extract the CUDA version used to compile it.
    Here is an example PTX header that this function should parse:
    // Generated by NVIDIA NVVM Compiler
    //
    // Compiler Build ID: CL-30672275
    // Cuda compilation tools, release 11.5, V11.5.119
    // Based on NVVM 7
    """
    file = open(path).read()
    major, minor = (
        re.search(r"Cuda compilation tools, release ([0-9\.]+)", file)
        .group(1)
        .split(".")
    )
    return int(major), int(minor)


# adapted from PTXCompiler
cp = subprocess.run([sys.executable, "-c", CMD], capture_output=True)
if cp.returncode == 0:
    # must have a driver to proceed
    versions = [int(s) for s in cp.stdout.strip().split()]
    driver_version = tuple(versions[:2])
    runtime_version = tuple(versions[2:])

    # CUDA enhanced compatibility not yet enabled
    if driver_version >= runtime_version:
        # Load the highest compute capability file available that is less than
        # the current device's.
        files = glob.glob(
            os.path.join(os.path.dirname(__file__), "shim_*.ptx")
        )
        dev = cuda.get_current_device()
        cc = "".join(str(x) for x in dev.compute_capability)
        files = glob.glob(
            os.path.join(os.path.dirname(__file__), "shim_*.ptx")
        )
        if len(files) == 0:
            raise RuntimeError(
                "This strings_udf installation is missing the necessary PTX "
                "files. Please file an issue reporting this error and how you "
                "installed cudf and strings_udf."
            )
        sms = [
            os.path.basename(f).rstrip(".ptx").lstrip("shim_") for f in files
        ]
        selected_sm = max(sm for sm in sms if sm < cc)
        ptxpath = os.path.join(
            os.path.dirname(__file__), f"shim_{selected_sm}.ptx"
        )

        if driver_version >= compiler_from_ptx_file(ptxpath):
            ENABLED = True
        else:
            del ptxpath
