# Copyright (c) 2021-2024, NVIDIA CORPORATION.

[build-system]
build-backend = "rapids_build_backend.build"
requires = [
    "rapids-build-backend>=0.3.0,<0.4.0.dev0",
    "setuptools",
    "wheel",
] # This list was generated by `rapids-dependency-file-generator`. To make changes, edit ../../dependencies.yaml and run `rapids-dependency-file-generator`.

[project]
name = "dask-cudf"
dynamic = ["version"]
description = "Utilities for Dask and cuDF interactions"
readme = { file = "README.md", content-type = "text/markdown" }
authors = [
    { name = "NVIDIA Corporation" },
]
license = { text = "Apache 2.0" }
requires-python = ">=3.10"
dependencies = [
    "cudf==24.12.*,>=0.0.0a0",
    "cupy-cuda11x>=12.0.0",
    "fsspec>=0.6.0",
    "numpy>=1.23,<3.0a0",
    "pandas>=2.0,<2.2.4dev0",
    "pynvml>=11.4.1,<12.0.0a0",
    "rapids-dask-dependency==24.12.*,>=0.0.0a0",
] # This list was generated by `rapids-dependency-file-generator`. To make changes, edit ../../dependencies.yaml and run `rapids-dependency-file-generator`.
classifiers = [
    "Intended Audience :: Developers",
    "Topic :: Database",
    "Topic :: Scientific/Engineering",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

[project.entry-points."dask.dataframe.backends"]
cudf = "dask_cudf.backends:CudfBackendEntrypoint"

[project.entry-points."dask_expr.dataframe.backends"]
cudf = "dask_cudf.backends:CudfDXBackendEntrypoint"

[project.optional-dependencies]
test = [
    "dask-cuda==24.12.*,>=0.0.0a0",
    "numba-cuda>=0.0.13,<0.0.18",
    "pytest-cov",
    "pytest-xdist",
    "pytest<8",
] # This list was generated by `rapids-dependency-file-generator`. To make changes, edit ../../dependencies.yaml and run `rapids-dependency-file-generator`.

[project.urls]
Homepage = "https://github.com/rapidsai/cudf"

[tool.rapids-build-backend]
build-backend = "setuptools.build_meta"
dependencies-file = "../../dependencies.yaml"
matrix-entry = "cuda_suffixed=true"

[tool.setuptools]
license-files = ["LICENSE"]

[tool.setuptools.dynamic]
version = {file = "dask_cudf/VERSION"}

[tool.setuptools.packages.find]
exclude = ["*tests*"]

[tool.ruff]
extend = "../../pyproject.toml"

[tool.ruff.lint.isort]
combine-as-imports = true
known-first-party = ["dask_cudf"]
section-order = ["future", "standard-library", "third-party", "dask", "rapids", "first-party", "local-folder"]

[tool.ruff.lint.isort.sections]
dask = ["dask", "distributed", "dask_cuda"]
rapids = ["rmm", "cudf"]

[tool.pydistcheck]
select = [
    "distro-too-large-compressed",
]

# PyPI limit is 100 MiB, fail CI before we get too close to that
max_allowed_size_compressed = '75M'

[tool.pytest.ini_options]
addopts = "--tb=native --strict-config --strict-markers"
empty_parameter_set_mark = "fail_at_collect"
filterwarnings = [
    "error::FutureWarning",
    "error::DeprecationWarning",
    # https://github.com/rapidsai/build-planning/issues/116
    "ignore:.*cuda..* module is deprecated.*:DeprecationWarning",
    # some third-party dependencies (e.g. 'boto3') still using datetime.datetime.utcnow()
    "ignore:.*datetime.*utcnow.*scheduled for removal:DeprecationWarning:botocore",
    "ignore:create_block_manager_from_blocks is deprecated and will be removed in a future version. Use public APIs instead.:DeprecationWarning",
    # https://github.com/dask/partd/blob/main/partd/pandas.py#L198
    "ignore:Passing a BlockManager to DataFrame is deprecated and will raise in a future version. Use public APIs instead.:DeprecationWarning",
    "ignore:String support for `aggregate_files` is experimental. Behavior may change in the future.:FutureWarning:dask",
    # Dask now loudly throws warnings: https://github.com/dask/dask/pull/11437
    # When the legacy implementation is removed we can remove this warning and stop running pytests with `DASK_DATAFRAME__QUERY_PLANNING=False`
    "ignore:The legacy Dask DataFrame implementation is deprecated and will be removed in a future version.*:FutureWarning",
]
xfail_strict = true
