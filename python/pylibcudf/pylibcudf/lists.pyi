# Copyright (c) 2024, NVIDIA CORPORATION.

from pylibcudf.column import Column
from pylibcudf.scalar import Scalar
from pylibcudf.table import Table
from pylibcudf.types import NullOrder

def explode_outer(input: Table, explode_column_idx: int) -> Table: ...
def concatenate_rows(input: Table) -> Column: ...
def concatenate_list_elements(input: Column, dropna: bool) -> Column: ...
def contains(input: Column, search_key: Column | Scalar) -> Column: ...
def contains_nulls(input: Column) -> Column: ...
def index_of(
    input: Column, search_key: Column | Scalar, find_first_option: bool
) -> Column: ...
def reverse(input: Column) -> Column: ...
def segmented_gather(input: Column, gather_map_list: Column) -> Column: ...
def extract_list_element(input: Column, index: Column | int) -> Column: ...
def count_elements(input: Column) -> Column: ...
def sequences(
    starts: Column, sizes: Column, steps: Column | None = None
) -> Column: ...
def sort_lists(
    input: Column,
    ascending: bool,
    na_position: NullOrder,
    stable: bool = False,
) -> Column: ...
def difference_distinct(
    lhs: Column, rhs: Column, nulls_equal: bool = True, nans_equal: bool = True
) -> Column: ...
def have_overlap(
    lhs: Column, rhs: Column, nulls_equal: bool = True, nans_equal: bool = True
) -> Column: ...
def intersect_distinct(
    lhs: Column, rhs: Column, nulls_equal: bool = True, nans_equal: bool = True
) -> Column: ...
def union_distinct(
    lhs: Column, rhs: Column, nulls_equal: bool = True, nans_equal: bool = True
) -> Column: ...
def apply_boolean_mask(input: Column, mask: Column) -> Column: ...
def distinct(input: Column, nulls_equal: bool, nans_equal: bool) -> Column: ...
