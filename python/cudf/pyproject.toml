# Copyright (c) 2021-2024, NVIDIA CORPORATION.

[build-system]
build-backend = "rapids_build_backend.build"
requires = [
    "rapids-build-backend>=0.3.0,<0.4.0.dev0",
    "scikit-build-core[pyproject]>=0.10.0",
] # This list was generated by `rapids-dependency-file-generator`. To make changes, edit ../../dependencies.yaml and run `rapids-dependency-file-generator`.

[project]
name = "cudf"
dynamic = ["version"]
description = "cuDF - GPU Dataframe"
readme = { file = "README.md", content-type = "text/markdown" }
authors = [
    { name = "NVIDIA Corporation" },
]
license = { text = "Apache 2.0" }
requires-python = ">=3.10"
dependencies = [
    "cachetools",
    "cubinlinker",
    "cuda-python>=11.8.5,<12.0a0",
    "cupy-cuda11x>=12.0.0",
    "fsspec>=0.6.0",
    "libcudf==25.2.*,>=0.0.0a0",
    "numba-cuda>=0.0.13,<0.0.18",
    "numpy>=1.23,<3.0a0",
    "nvtx>=0.2.1",
    "packaging",
    "pandas>=2.0,<2.2.4dev0",
    "ptxcompiler",
    "pyarrow>=14.0.0,<19.0.0a0,!=17.0.0; platform_machine=='aarch64'",
    "pyarrow>=14.0.0,<19.0.0a0; platform_machine=='x86_64'",
    "pylibcudf==25.2.*,>=0.0.0a0",
    "rich",
    "rmm==25.2.*,>=0.0.0a0",
    "typing_extensions>=4.0.0",
] # This list was generated by `rapids-dependency-file-generator`. To make changes, edit ../../dependencies.yaml and run `rapids-dependency-file-generator`.
classifiers = [
    "Intended Audience :: Developers",
    "Topic :: Database",
    "Topic :: Scientific/Engineering",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

[project.optional-dependencies]
test = [
    "cramjam",
    "fastavro>=0.22.9",
    "hypothesis",
    "mmh3",
    "msgpack",
    "pytest-benchmark",
    "pytest-cases>=3.8.2",
    "pytest-cov",
    "pytest-xdist",
    "pytest<8",
    "scipy",
    "tokenizers==0.15.2",
    "transformers==4.39.3",
    "tzdata",
    "xxhash",
] # This list was generated by `rapids-dependency-file-generator`. To make changes, edit ../../dependencies.yaml and run `rapids-dependency-file-generator`.
pandas-tests = [
    "ipython",
    "pandas[test, pyarrow, performance, computation, fss, excel, parquet, feather, hdf5, spss, html, xml, plot, output-formatting, clipboard, compression]",
    "pytest-reportlog",
] # This list was generated by `rapids-dependency-file-generator`. To make changes, edit ../../dependencies.yaml and run `rapids-dependency-file-generator`.
cudf-pandas-tests = [
    "ipython",
    "jupyter_client",
    "nbconvert",
    "nbformat",
    "openpyxl",
] # This list was generated by `rapids-dependency-file-generator`. To make changes, edit ../../dependencies.yaml and run `rapids-dependency-file-generator`.

[project.urls]
Homepage = "https://github.com/rapidsai/cudf"
Documentation = "https://docs.rapids.ai/api/cudf/stable/"

[tool.pydistcheck]
select = [
    "distro-too-large-compressed",
]

# PyPI limit is 100 MiB, fail CI before we get too close to that
max_allowed_size_compressed = '75M'

[tool.pytest.ini_options]
addopts = "--tb=native --strict-config --strict-markers"
empty_parameter_set_mark = "fail_at_collect"
filterwarnings = [
    "error",
    "ignore:::.*xdist.*",
    "ignore:::.*pytest.*",
    # https://github.com/rapidsai/build-planning/issues/116
    "ignore:.*cuda..* module is deprecated.*:DeprecationWarning",
    # some third-party dependencies (e.g. 'boto3') still using datetime.datetime.utcnow()
    "ignore:.*datetime.*utcnow.*scheduled for removal.*:DeprecationWarning:botocore",
    # Deprecation warning from Pyarrow Table.to_pandas() with pandas-2.2+
    "ignore:Passing a BlockManager to DataFrame is deprecated:DeprecationWarning",
    # PerformanceWarning from cupy warming up the JIT cache
    "ignore:Jitify is performing a one-time only warm-up to populate the persistent cache:cupy._util.PerformanceWarning",
    # Ignore numba PEP 456 warning specific to arm machines
    "ignore:FNV hashing is not implemented in Numba.*:UserWarning"
]
markers = [
    "spilling: mark benchmark a good candidate to run with `CUDF_SPILL=ON`"
]
xfail_strict = true

[tool.rapids-build-backend]
build-backend = "scikit_build_core.build"
dependencies-file = "../../dependencies.yaml"
matrix-entry = "cuda_suffixed=true"
requires = [
    "cmake>=3.26.4,!=3.30.0",
    "cython>=3.0.3",
    "libcudf==25.2.*,>=0.0.0a0",
    "librmm==25.2.*,>=0.0.0a0",
    "ninja",
    "pylibcudf==25.2.*,>=0.0.0a0",
    "rmm==25.2.*,>=0.0.0a0",
] # This list was generated by `rapids-dependency-file-generator`. To make changes, edit ../../dependencies.yaml and run `rapids-dependency-file-generator`.

[tool.scikit-build]
build-dir = "build/{wheel_tag}"
cmake.build-type = "Release"
cmake.version = "CMakeLists.txt"
minimum-version = "build-system.requires"
ninja.make-fallback = true
sdist.exclude = ["*tests*"]
sdist.reproducible = true
wheel.packages = ["cudf"]

[tool.scikit-build.metadata.version]
provider = "scikit_build_core.metadata.regex"
input = "cudf/VERSION"
regex = "(?P<value>.*)"

[tool.ruff]
extend = "../../pyproject.toml"

[tool.ruff.lint.isort]
combine-as-imports = true
known-first-party = ["cudf"]
section-order = ["future", "standard-library", "third-party", "dask", "rapids", "first-party", "local-folder"]

[tool.ruff.lint.isort.sections]
dask = ["dask", "distributed", "dask_cuda"]
rapids = ["rmm", "pylibcudf"]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["E402", "F401"]
