# Copyright (c) 2024, NVIDIA CORPORATION.

[build-system]
build-backend = "rapids_build_backend.build"
requires = [
    "rapids-build-backend>=0.3.0,<0.4.0.dev0",
    "setuptools",
    "wheel",
] # This list was generated by `rapids-dependency-file-generator`. To make changes, edit ../../dependencies.yaml and run `rapids-dependency-file-generator`.

[project]
name = "cudf-polars"
dynamic = ["version"]
description = "Executor for polars using cudf"
readme = { file = "README.md", content-type = "text/markdown" }
authors = [
    { name = "NVIDIA Corporation" },
]
license = { text = "Apache 2.0" }
requires-python = ">=3.10"
dependencies = [
    "polars>=1.0,<1.3",
    "pylibcudf==24.12.*,>=0.0.0a0",
] # This list was generated by `rapids-dependency-file-generator`. To make changes, edit ../../dependencies.yaml and run `rapids-dependency-file-generator`.
classifiers = [
    "Intended Audience :: Developers",
    "Topic :: Database",
    "Topic :: Scientific/Engineering",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

[project.optional-dependencies]
test = [
    "pytest-cov",
    "pytest-xdist",
    "pytest<8",
] # This list was generated by `rapids-dependency-file-generator`. To make changes, edit ../../dependencies.yaml and run `rapids-dependency-file-generator`.

[project.urls]
Homepage = "https://github.com/rapidsai/cudf"

[tool.setuptools]
license-files = ["LICENSE"]

[tool.setuptools.dynamic]
version = {file = "cudf_polars/VERSION"}

[tool.pytest.ini_options]
xfail_strict = true

[tool.coverage.report]
exclude_also = [
  "if TYPE_CHECKING:",
  "class .*\\bProtocol\\):",
  "assert_never\\("
]

[tool.ruff]
line-length = 88
indent-width = 4
target-version = "py310"
fix = true

[tool.ruff.lint]
select = [
  "E", # pycodestyle
  "W", # pycodestyle
  "F", # Pyflakes
  "B", # flake8-bugbear
  "C4", # flake8-comprehensions
  "D", # flake8-docstrings
  "D213", # Augment NumPy docstring convention: Multi-line docstring summary should start at the second line
  "D417", # Augment NumPy docstring convention: Missing argument descriptions
  "I", # isort
  "ISC", # flake8-implicit-str-concat
  "INP", # flake8-no-pep420 (namespace packages)
  "SIM", # flake8-simplify
  "TCH", # flake8-type-checking
  "TID", # flake8-tidy-imports
  "PLC", # pylint-convention
  "PLE", # pylint-error
  # Not enabling PLR (pylint-refactor) since it conflicts with other rules
  "PLW", # pylint-warning
  "PERF", # perflint
  "UP", # pyupgrade
  "PT", # flake8-pytest-style
  # https://docs.astral.sh/ruff/rules/#flake8-return-ret
  "RET502", # no implicit return
  "RET503", # no implicit return
  "RET504", # no implicit return
  "RUF", # Ruff-specific rules
  "PTH", # flake8-use-pathlib
  "FA", # flake8-future-annotations
  "PIE", # flake8-pie
  "TD", # flake8-todos
  "TRY", # tryceratops
  "FBT", # flake8-boolean-trap
]

ignore = [
  # Line length regulated by formatter
  "E501",
  # pydocstyle: http://www.pydocstyle.org/en/stable/error_codes.html
  "D401", # Relax NumPy docstring convention: First line should be in imperative mood
  # flake8-pytest-style:
  "PT011", # pytest.raises({exception}) is too broad, set the match parameter or use a more specific exception
  # flake8-simplify
  "SIM108", # Use ternary operator
  # flake8-todos
  "TD002", # Missing author in TODO
  "TD003", # Missing issue link on the line following this TODO
  # tryceratops
  "TRY003", # Avoid specifying long messages outside the exception class
  # pyupgrade
  "UP038",  # Use `X | Y` in `isinstance` call instead of `(X, Y)`
  # Lints below are turned off because of conflicts with the ruff
  # formatter
  # See https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
  "W191", # tab-indentation
  "E111", # indentation-with-invalid-multiple
  "E114", # indentation-with-invalid-multiple-comment
  "E117", # over-indented
  "D206", # indent-with-spaces
  "D300", # triple-single-quotes
  "Q000", # bad-quotes-inline-string
  "Q001", # bad-quotes-multiline-string
  "Q002", # bad-quotes-docstring
  "Q003", # avoidable-escaped-quote
  "COM812", # missing-trailing-comma
  "COM819", # prohibited-trailing-comma
  "ISC001", # single-line-implicit-string-concatenation
  "ISC002", # multi-line-implicit-string-concatenation
]
fixable = ["ALL"]

[tool.ruff.lint.per-file-ignores]
"**/tests/**/*.py" = ["D"]
"**/cudf_polars/typing/__init__.py" = [
  # pyupgrade
  "UP007", # Use `X | Y` for type annotations
]

[tool.ruff.lint.flake8-pytest-style]
# https://docs.astral.sh/ruff/settings/#lintflake8-pytest-style
fixture-parentheses = false
mark-parentheses = false
parametrize-names-type = "csv"
parametrize-values-type = "list"
parametrize-values-row-type = "tuple"

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.flake8-type-checking]
strict = true

[tool.ruff.lint.isort]
case-sensitive = true
combine-as-imports = true
order-by-type = true
known-first-party = ["cudf_polars"]
default-section = "third-party"
section-order = [
  "future",
  "standard-library",
  "third-party",
  "polars",
  "rapids",
  "first-party",
  "local-folder"
]
required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.isort.sections]
polars = ["polars"]
rapids = ["rmm", "cudf"]

[tool.ruff.format]
docstring-code-format = true

[tool.rapids-build-backend]
build-backend = "setuptools.build_meta"
dependencies-file = "../../dependencies.yaml"
matrix-entry = "cuda_suffixed=true"
